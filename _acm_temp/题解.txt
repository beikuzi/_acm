
c题，找规律，求出马互不攻击的方法：一行就全部，两行就田，以上就一半
*e题，求出第一个拥有相同二进制1的数、
	x&-x找到最后面的那个1
	x-=x&-x将最后那个1给去掉
	倒水：每次对最后那个1增加
	int count(int x)
	{
		int num=0;
		for(;x;x-=x&-x)num++;
		return num;
	}
	int supple(int x,int n)
	{//对数x补充n个1, p代表那个位置的数
		int t=x,p=1;
		while(n--)
		{
			while(t&1)t>>=1,p<<=1;
			x+=p;t>>=1;p<<=1;
		}
		return x;
	}
*f题，一个阶乘在k进制下有几位数（比如5位可以表达
	当一边是阶乘一边是幂，可以log两边降次
		即n!<=k^m,求出最小的m就是换算出k进制有多少位了。
		那么m=(log1+log2+log3+......+logn)/(logk)
	对于一个double，可以用强制转换判断是否是整型，否则取整，最后当0位整型输出
		if(ans!=(int) ans)ans=(int)ans+1;
		printf("%.lf\n",ans);
*h题，求一个大圆（给出半径R）内切n个小圆时，小圆的最大半径
	用反函数得到π，arccos(-1.0)
	两个小圆互相相切并且相切与大圆以内
	小圆圆心与大圆圆心的连线，两个小圆相切的点与大圆圆心的连线，这两个点的连线形成一个直角三角形
*j题，1, 12, 123, 1234, ..., 12345678910, .……
	问第a到第b个数（inclusive）里有几个可以被3整除。
	前几项的各位数之和对3取模，可以找到规律――余数是1，0，0，1，0，0，1，0，0，1...。也就是每三个数有两个可被3整除。
	/3后，只有余数为2这种情况额外多1个，余0余1都不多
	int cal(int x)
	{
		return x/3*2+(x%3>1);
	}
k题，将一个数分解成若干个阶乘数
	1.一个数的阶乘，从1！搭配i！的和，一定<，（i+1）！
	2.要顺序记录一串数字, a[num++]=
	3.直接从大到小贪心即可，1是贪心可行性的缘故，因为必然要加一个数，否则之后不可能加起来
	//剪枝-非必要：
		if(t>3*a[i])//这个是之前2倍以上《3倍这个
     		{
     			printf("impossible\n");
     			b=false;
     			break;
     		}
 l题，棋盘对角线规则
	x1-x2==y1-y2的话，他们就在同一条对角线上
	x1+y1和x2+y2如果一奇一偶，就一定不能相遇
q题，平行四边形面积就是向量积，根据向量积s=x1*y2+x2*y1(由cos的向量公式推出sin的，sin再乘上向量绝对值就是面积，然后将整个公式带入转化)
r题，三圆相切的中间面积=两倍r的三角形面积 - 各个圆的扇形，s=sqrt(p*(p-a-b)*(p-b-c)*(p-a-c))
u题，给出圆心和圆上两个点的坐标，求出劣弧的长度：余弦定理求出角度，然后l=ar
v题，物理加速度，有帕里和京华（？）相向过来，然后0距离相贴。用各自速度v1v2和加速度a1a2求出中间的路程x1，以及如果有dd在中间来回飞v3，求出dd的路程x2
	首先双方都必须停下来，求出各自停下来的时间，根据贴贴均值公式，把各自位移算出来加起来就是总x1
	然后从二者停下来时间，t=max(v1/a1,v2/a2);选出总贴贴时间，而dd速度恒定，所以无论dd起点在哪，都是v3*t总
x题，将一个数分解成奇数*偶数，并且要求这个偶数尽可能小（保证不是2的n次方，这个数可达2的63次方）。
	保证奇数最大大，那么只要原数一直/2，直到得到奇数，就是最大的奇数